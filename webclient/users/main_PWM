/*
Author: Phillip Logan
ID Number: 620053626
Date: Thu Apr 7, 2016
Title:
*/

//include libraries
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>


enum PWM_CHANNEL {
	
	// Name by color
	CHAN_RED		= 1,
	CHAN_GREEN		= 1<<1,
	CHAN_YELLOW		= 1<<2,
	CHAN_BLUE		= 1<<3,
	
	// Name by index
	CHAN_1			= 1,
	CHAN_2			= 1<<1,
	CHAN_3			= 1<<2,
	CHAN_4			= 1<<3,
	
	// Name by port
	CHAN_PD6		= 1,
	CHAN_PD5		= 1<<1,
	CHAN_PB3		= 1<<2,
	CHAN_PD3		= 1<<3,
	
	// Name by register
	CHAN_OC0A		= 1,
	CHAN_OC0B		= 1<<1,
	CHAN_OC2A		= 1<<2,
	CHAN_OC2B		= 1<<3
	
};


void pwm_initialize() {
	
	// Set mode of operation to FastPWM
	TCCR0A |= (1<<WGM00 | 1<<WGM01);
	TCCR2A |= (1<<WGM20 | 1<<WGM21);
	
	// Set clock source (prescaler)
	TCCR0B |= (1<<CS01);
	TCCR2B |= (1<<CS21);
	
	// Set to 50% duty cycle
	OCR0A = 0x80;
	OCR0B = 0x80;
	OCR2A = 0x80;
	OCR2B = 0x80;
	
	// 4 PWM channel outputs
	DDRB |= 1<<PB3; // OC2A
	DDRD |= 1<<PD3; // OC2B
	DDRD |= 1<<PD5; // OC0B
	DDRD |= 1<<PD6; // OC0A	
	
}

// Enable PWM channels
void pwm_enable(enum PWM_CHANNEL channel) {
	if (channel & CHAN_OC0A) TCCR0A |= 1<<COM0A1;
	if (channel & CHAN_OC0B) TCCR0A |= 1<<COM0B1;
	if (channel & CHAN_OC2A) TCCR2A |= 1<<COM2A1;
	if (channel & CHAN_OC2B) TCCR2A |= 1<<COM2B1;
}

// Disable PWM channels
void pwm_disable(enum PWM_CHANNEL channel) {
	if (channel & CHAN_OC0A) TCCR0A &= ~(1<<COM0A1);
	if (channel & CHAN_OC0B) TCCR0A &= ~(1<<COM0B1);
	if (channel & CHAN_OC2A) TCCR2A &= ~(1<<COM2A1);
	if (channel & CHAN_OC2B) TCCR2A &= ~(1<<COM2B1);
}

// Sets the channel brightness
void pwm_dutycycle(enum PWM_CHANNEL channel, uint8_t dutycycle) {
	if (channel & CHAN_OC0A) OCR0A = dutycycle;
	if (channel & CHAN_OC0B) OCR0B = dutycycle;
	if (channel & CHAN_OC2A) OCR2A = dutycycle;
	if (channel & CHAN_OC2B) OCR2B = dutycycle;
}
int main(void)
{
  pwm_initialize(CHAN_3);
  pwm_enable(CHAN_3);
  int i;
  while(1){
    for(i=0; i<128; i++){
      pwm_dutycycle(CHAN_3, i);
      _delay_ms(10);
    }
    for(i=127; i>0; i--){
      pwm_dutycycle(CHAN_3, i);
      _delay_ms(10);
    }
  }
}